---
###############################################################################
#
# Ansible Playbook for CIS SUSE Linux Enterprise 15 Benchmark for Level 1 - Server [CUSTOMIZED]
#
# Profile Description:
# This profile defines a baseline that aligns to the "Level 1 - Server"
# configuration from the Center for Internet Security®
# SUSE Linux Enterprise 15 Benchmark™, v1.1.1, released 01-24-2022.
# This profile includes Center for Internet Security®
# SUSE Linux Enterprise 15 CIS Benchmarks™ content.
#
# Profile ID:  xccdf_org.ssgproject.content_profile_cis_password_policy
# Benchmark ID:  xccdf_org.ssgproject.content_benchmark_SLE-15
# Benchmark Version:  0.1.73
# XCCDF Version:  1.2
#
# This file was generated by OpenSCAP 1.3.6 using:
# $ oscap xccdf generate fix --profile xccdf_org.ssgproject.content_profile_cis_password_policy --fix-type ansible xccdf-file.xml
#
# This Ansible Playbook is generated from an OpenSCAP profile without preliminary evaluation.
# It attempts to fix every selected rule, even if the system is already compliant.
#
# How to apply this Ansible Playbook:
# $ ansible-playbook -i "localhost," -c local playbook.yml
# $ ansible-playbook -i "192.168.1.155," playbook.yml
# $ ansible-playbook -i inventory.ini playbook.yml
#
###############################################################################


- hosts: all
  vars:
    var_password_pam_unix_remember: !!str 5
    var_password_pam_tally2: !!str 5
    var_accounts_passwords_pam_tally2_unlock_time: !!str 600
    var_password_pam_dcredit: !!str -1
    var_password_pam_difok: !!str 8
    var_password_pam_lcredit: !!str -1
    var_password_pam_minlen: !!str 15
    var_password_pam_ocredit: !!str -1
    var_password_pam_retry: !!str 3
    var_password_pam_ucredit: !!str -1
  tasks:
    - name: Gather the package facts
      package_facts:
        manager: auto
      tags:
      - CCE-85678-1
      - CJIS-5.6.2.1.1
      - DISA-STIG-SLES-15-020250
      - NIST-800-171-3.5.8
      - NIST-800-53-IA-5(1)(e)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.5
      - PCI-DSSv4-8.3.7
      - accounts_password_pam_unix_remember
      - configure_strategy
      - low_complexity
      - medium_disruption
      - medium_severity
      - no_reboot_needed



    - name: Limit Password Reuse - Check if system relies on authselect tool
      ansible.builtin.stat:
        path: /usr/bin/authselect
      register: result_authselect_present
      when: '"pam" in ansible_facts.packages'
      tags:
      - CCE-85678-1
      - CJIS-5.6.2.1.1
      - DISA-STIG-SLES-15-020250
      - NIST-800-171-3.5.8
      - NIST-800-53-IA-5(1)(e)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.5
      - PCI-DSSv4-8.3.7
      - accounts_password_pam_unix_remember
      - configure_strategy
      - low_complexity
      - medium_disruption
      - medium_severity
      - no_reboot_needed

    - name: Limit Password Reuse - Collect the available authselect features
      ansible.builtin.command:
        cmd: authselect list-features minimal
      register: result_authselect_available_features
      changed_when: false
      when:
      - '"pam" in ansible_facts.packages'
      - result_authselect_present.stat.exists
      tags:
      - CCE-85678-1
      - CJIS-5.6.2.1.1
      - DISA-STIG-SLES-15-020250
      - NIST-800-171-3.5.8
      - NIST-800-53-IA-5(1)(e)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.5
      - PCI-DSSv4-8.3.7
      - accounts_password_pam_unix_remember
      - configure_strategy
      - low_complexity
      - medium_disruption
      - medium_severity
      - no_reboot_needed

    - name: Limit Password Reuse - Enable pam_pwhistory.so using authselect feature
      block:

      - name: Limit Password Reuse - Check integrity of authselect current profile
        ansible.builtin.command:
          cmd: authselect check
        register: result_authselect_check_cmd
        changed_when: false
        failed_when: false

      - name: Limit Password Reuse - Informative message based on the authselect integrity
          check result
        ansible.builtin.assert:
          that:
          - result_authselect_check_cmd.rc == 0
          fail_msg:
          - authselect integrity check failed. Remediation aborted!
          - This remediation could not be applied because an authselect profile was not
            selected or the selected profile is not intact.
          - It is not recommended to manually edit the PAM files when authselect tool
            is available.
          - In cases where the default authselect profile does not cover a specific demand,
            a custom authselect profile is recommended.
          success_msg:
          - authselect integrity check passed

      - name: Limit Password Reuse - Get authselect current features
        ansible.builtin.shell:
          cmd: authselect current | tail -n+3 | awk '{ print $2 }'
        register: result_authselect_features
        changed_when: false
        when:
        - result_authselect_check_cmd is success

      - name: Limit Password Reuse - Ensure "with-pwhistory" feature is enabled using
          authselect tool
        ansible.builtin.command:
          cmd: authselect enable-feature with-pwhistory
        register: result_authselect_enable_feature_cmd
        when:
        - result_authselect_check_cmd is success
        - result_authselect_features.stdout is not search("with-pwhistory")

      - name: Limit Password Reuse - Ensure authselect changes are applied
        ansible.builtin.command:
          cmd: authselect apply-changes -b
        when:
        - result_authselect_enable_feature_cmd is not skipped
        - result_authselect_enable_feature_cmd is success
      when:
      - '"pam" in ansible_facts.packages'
      - result_authselect_present.stat.exists
      - result_authselect_available_features.stdout is search("with-pwhistory")
      tags:
      - CCE-85678-1
      - CJIS-5.6.2.1.1
      - DISA-STIG-SLES-15-020250
      - NIST-800-171-3.5.8
      - NIST-800-53-IA-5(1)(e)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.5
      - PCI-DSSv4-8.3.7
      - accounts_password_pam_unix_remember
      - configure_strategy
      - low_complexity
      - medium_disruption
      - medium_severity
      - no_reboot_needed

    - name: Limit Password Reuse - Enable pam_pwhistory.so in appropriate PAM files
      block:

      - name: Limit Password Reuse - Define the PAM file to be edited as a local fact
        ansible.builtin.set_fact:
          pam_file_path: /etc/pam.d/common-password

      - name: Limit Password Reuse - Check if system relies on authselect tool
        ansible.builtin.stat:
          path: /usr/bin/authselect
        register: result_authselect_present

      - name: Limit Password Reuse - Ensure authselect custom profile is used if authselect
          is present
        block:

        - name: Limit Password Reuse - Check integrity of authselect current profile
          ansible.builtin.command:
            cmd: authselect check
          register: result_authselect_check_cmd
          changed_when: false
          failed_when: false

        - name: Limit Password Reuse - Informative message based on the authselect integrity
            check result
          ansible.builtin.assert:
            that:
            - result_authselect_check_cmd.rc == 0
            fail_msg:
            - authselect integrity check failed. Remediation aborted!
            - This remediation could not be applied because an authselect profile was
              not selected or the selected profile is not intact.
            - It is not recommended to manually edit the PAM files when authselect tool
              is available.
            - In cases where the default authselect profile does not cover a specific
              demand, a custom authselect profile is recommended.
            success_msg:
            - authselect integrity check passed

        - name: Limit Password Reuse - Get authselect current profile
          ansible.builtin.shell:
            cmd: authselect current -r | awk '{ print $1 }'
          register: result_authselect_profile
          changed_when: false
          when:
          - result_authselect_check_cmd is success

        - name: Limit Password Reuse - Define the current authselect profile as a local
            fact
          ansible.builtin.set_fact:
            authselect_current_profile: '{{ result_authselect_profile.stdout }}'
            authselect_custom_profile: '{{ result_authselect_profile.stdout }}'
          when:
          - result_authselect_profile is not skipped
          - result_authselect_profile.stdout is match("custom/")

        - name: Limit Password Reuse - Define the new authselect custom profile as a local
            fact
          ansible.builtin.set_fact:
            authselect_current_profile: '{{ result_authselect_profile.stdout }}'
            authselect_custom_profile: custom/hardening
          when:
          - result_authselect_profile is not skipped
          - result_authselect_profile.stdout is not match("custom/")

        - name: Limit Password Reuse - Get authselect current features to also enable
            them in the custom profile
          ansible.builtin.shell:
            cmd: authselect current | tail -n+3 | awk '{ print $2 }'
          register: result_authselect_features
          changed_when: false
          when:
          - result_authselect_profile is not skipped
          - authselect_current_profile is not match("custom/")

        - name: Limit Password Reuse - Check if any custom profile with the same name
            was already created
          ansible.builtin.stat:
            path: /etc/authselect/{{ authselect_custom_profile }}
          register: result_authselect_custom_profile_present
          changed_when: false
          when:
          - authselect_current_profile is not match("custom/")

        - name: Limit Password Reuse - Create an authselect custom profile based on the
            current profile
          ansible.builtin.command:
            cmd: authselect create-profile hardening -b {{ authselect_current_profile
              }}
          when:
          - result_authselect_check_cmd is success
          - authselect_current_profile is not match("custom/")
          - not result_authselect_custom_profile_present.stat.exists

        - name: Limit Password Reuse - Ensure authselect changes are applied
          ansible.builtin.command:
            cmd: authselect apply-changes -b --backup=before-hardening-custom-profile
          when:
          - result_authselect_check_cmd is success
          - result_authselect_profile is not skipped
          - authselect_current_profile is not match("custom/")
          - authselect_custom_profile is not match(authselect_current_profile)

        - name: Limit Password Reuse - Ensure the authselect custom profile is selected
          ansible.builtin.command:
            cmd: authselect select {{ authselect_custom_profile }}
          register: result_pam_authselect_select_profile
          when:
          - result_authselect_check_cmd is success
          - result_authselect_profile is not skipped
          - authselect_current_profile is not match("custom/")
          - authselect_custom_profile is not match(authselect_current_profile)

        - name: Limit Password Reuse - Restore the authselect features in the custom profile
          ansible.builtin.command:
            cmd: authselect enable-feature {{ item }}
          loop: '{{ result_authselect_features.stdout_lines }}'
          register: result_pam_authselect_restore_features
          when:
          - result_authselect_profile is not skipped
          - result_authselect_features is not skipped
          - result_pam_authselect_select_profile is not skipped

        - name: Limit Password Reuse - Ensure authselect changes are applied
          ansible.builtin.command:
            cmd: authselect apply-changes -b --backup=after-hardening-custom-profile
          when:
          - result_authselect_check_cmd is success
          - result_authselect_profile is not skipped
          - result_pam_authselect_restore_features is not skipped

        - name: Limit Password Reuse - Change the PAM file to be edited according to the
            custom authselect profile
          ansible.builtin.set_fact:
            pam_file_path: /etc/authselect/{{ authselect_custom_profile }}/{{ pam_file_path
              | basename }}
        when:
        - result_authselect_present.stat.exists

      - name: Limit Password Reuse - Check if expected PAM module line is present in {{
          pam_file_path }}
        ansible.builtin.lineinfile:
          path: '{{ pam_file_path }}'
          regexp: ^\s*password\s+{{ 'requisite' | regex_escape() }}\s+pam_pwhistory.so\s*.*
          state: absent
        check_mode: true
        changed_when: false
        register: result_pam_line_present

      - name: Limit Password Reuse - Include or update the PAM module line in {{ pam_file_path
          }}
        block:

        - name: Limit Password Reuse - Check if required PAM module line is present in
            {{ pam_file_path }} with different control
          ansible.builtin.lineinfile:
            path: '{{ pam_file_path }}'
            regexp: ^\s*password\s+.*\s+pam_pwhistory.so\s*
            state: absent
          check_mode: true
          changed_when: false
          register: result_pam_line_other_control_present

        - name: Limit Password Reuse - Ensure the correct control for the required PAM
            module line in {{ pam_file_path }}
          ansible.builtin.replace:
            dest: '{{ pam_file_path }}'
            regexp: ^(\s*password\s+).*(\bpam_pwhistory.so.*)
            replace: \1requisite \2
          register: result_pam_module_edit
          when:
          - result_pam_line_other_control_present.found == 1

        - name: Limit Password Reuse - Ensure the required PAM module line is included
            in {{ pam_file_path }}
          ansible.builtin.lineinfile:
            dest: '{{ pam_file_path }}'
            insertafter: ^password.*requisite.*pam_pwquality\.so
            line: password    requisite    pam_pwhistory.so
          register: result_pam_module_add
          when:
          - result_pam_line_other_control_present.found == 0 or result_pam_line_other_control_present.found
            > 1

        - name: Limit Password Reuse - Ensure authselect changes are applied
          ansible.builtin.command:
            cmd: authselect apply-changes -b
          when:
          - result_authselect_present is defined
          - result_authselect_present.stat.exists
          - |-
            (result_pam_module_add is defined and result_pam_module_add.changed)
             or (result_pam_module_edit is defined and result_pam_module_edit.changed)
        when:
        - result_pam_line_present.found is defined
        - result_pam_line_present.found == 0
      when:
      - '"pam" in ansible_facts.packages'
      - |
        (result_authselect_available_features.stdout is defined and result_authselect_available_features.stdout is not search("with-pwhistory")) or result_authselect_available_features is not defined
      tags:
      - CCE-85678-1
      - CJIS-5.6.2.1.1
      - DISA-STIG-SLES-15-020250
      - NIST-800-171-3.5.8
      - NIST-800-53-IA-5(1)(e)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.5
      - PCI-DSSv4-8.3.7
      - accounts_password_pam_unix_remember
      - configure_strategy
      - low_complexity
      - medium_disruption
      - medium_severity
      - no_reboot_needed

    - name: Limit Password Reuse - Check the presence of /etc/security/pwhistory.conf
        file
      ansible.builtin.stat:
        path: /etc/security/pwhistory.conf
      register: result_pwhistory_conf_check
      when: '"pam" in ansible_facts.packages'
      tags:
      - CCE-85678-1
      - CJIS-5.6.2.1.1
      - DISA-STIG-SLES-15-020250
      - NIST-800-171-3.5.8
      - NIST-800-53-IA-5(1)(e)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.5
      - PCI-DSSv4-8.3.7
      - accounts_password_pam_unix_remember
      - configure_strategy
      - low_complexity
      - medium_disruption
      - medium_severity
      - no_reboot_needed

    - name: Limit Password Reuse - pam_pwhistory.so parameters are configured in /etc/security/pwhistory.conf
        file
      block:

      - name: Limit Password Reuse - Ensure the pam_pwhistory.so remember parameter in
          /etc/security/pwhistory.conf
        ansible.builtin.lineinfile:
          path: /etc/security/pwhistory.conf
          regexp: ^\s*remember\s*=
          line: remember = {{ var_password_pam_unix_remember }}
          state: present

      - name: Limit Password Reuse - Ensure the pam_pwhistory.so remember parameter is
          removed from PAM files
        block:

        - name: Limit Password Reuse - Check if /etc/pam.d/common-password file is present
          ansible.builtin.stat:
            path: /etc/pam.d/common-password
          register: result_pam_file_present

        - name: Limit Password Reuse - Check the proper remediation for the system
          block:

          - name: Limit Password Reuse - Define the PAM file to be edited as a local fact
            ansible.builtin.set_fact:
              pam_file_path: /etc/pam.d/common-password

          - name: Limit Password Reuse - Check if system relies on authselect tool
            ansible.builtin.stat:
              path: /usr/bin/authselect
            register: result_authselect_present

          - name: Limit Password Reuse - Ensure authselect custom profile is used if authselect
              is present
            block:

            - name: Limit Password Reuse - Check integrity of authselect current profile
              ansible.builtin.command:
                cmd: authselect check
              register: result_authselect_check_cmd
              changed_when: false
              failed_when: false

            - name: Limit Password Reuse - Informative message based on the authselect
                integrity check result
              ansible.builtin.assert:
                that:
                - result_authselect_check_cmd.rc == 0
                fail_msg:
                - authselect integrity check failed. Remediation aborted!
                - This remediation could not be applied because an authselect profile
                  was not selected or the selected profile is not intact.
                - It is not recommended to manually edit the PAM files when authselect
                  tool is available.
                - In cases where the default authselect profile does not cover a specific
                  demand, a custom authselect profile is recommended.
                success_msg:
                - authselect integrity check passed

            - name: Limit Password Reuse - Get authselect current profile
              ansible.builtin.shell:
                cmd: authselect current -r | awk '{ print $1 }'
              register: result_authselect_profile
              changed_when: false
              when:
              - result_authselect_check_cmd is success

            - name: Limit Password Reuse - Define the current authselect profile as a
                local fact
              ansible.builtin.set_fact:
                authselect_current_profile: '{{ result_authselect_profile.stdout }}'
                authselect_custom_profile: '{{ result_authselect_profile.stdout }}'
              when:
              - result_authselect_profile is not skipped
              - result_authselect_profile.stdout is match("custom/")

            - name: Limit Password Reuse - Define the new authselect custom profile as
                a local fact
              ansible.builtin.set_fact:
                authselect_current_profile: '{{ result_authselect_profile.stdout }}'
                authselect_custom_profile: custom/hardening
              when:
              - result_authselect_profile is not skipped
              - result_authselect_profile.stdout is not match("custom/")

            - name: Limit Password Reuse - Get authselect current features to also enable
                them in the custom profile
              ansible.builtin.shell:
                cmd: authselect current | tail -n+3 | awk '{ print $2 }'
              register: result_authselect_features
              changed_when: false
              when:
              - result_authselect_profile is not skipped
              - authselect_current_profile is not match("custom/")

            - name: Limit Password Reuse - Check if any custom profile with the same name
                was already created
              ansible.builtin.stat:
                path: /etc/authselect/{{ authselect_custom_profile }}
              register: result_authselect_custom_profile_present
              changed_when: false
              when:
              - authselect_current_profile is not match("custom/")

            - name: Limit Password Reuse - Create an authselect custom profile based on
                the current profile
              ansible.builtin.command:
                cmd: authselect create-profile hardening -b {{ authselect_current_profile
                  }}
              when:
              - result_authselect_check_cmd is success
              - authselect_current_profile is not match("custom/")
              - not result_authselect_custom_profile_present.stat.exists

            - name: Limit Password Reuse - Ensure authselect changes are applied
              ansible.builtin.command:
                cmd: authselect apply-changes -b --backup=before-hardening-custom-profile
              when:
              - result_authselect_check_cmd is success
              - result_authselect_profile is not skipped
              - authselect_current_profile is not match("custom/")
              - authselect_custom_profile is not match(authselect_current_profile)

            - name: Limit Password Reuse - Ensure the authselect custom profile is selected
              ansible.builtin.command:
                cmd: authselect select {{ authselect_custom_profile }}
              register: result_pam_authselect_select_profile
              when:
              - result_authselect_check_cmd is success
              - result_authselect_profile is not skipped
              - authselect_current_profile is not match("custom/")
              - authselect_custom_profile is not match(authselect_current_profile)

            - name: Limit Password Reuse - Restore the authselect features in the custom
                profile
              ansible.builtin.command:
                cmd: authselect enable-feature {{ item }}
              loop: '{{ result_authselect_features.stdout_lines }}'
              register: result_pam_authselect_restore_features
              when:
              - result_authselect_profile is not skipped
              - result_authselect_features is not skipped
              - result_pam_authselect_select_profile is not skipped

            - name: Limit Password Reuse - Ensure authselect changes are applied
              ansible.builtin.command:
                cmd: authselect apply-changes -b --backup=after-hardening-custom-profile
              when:
              - result_authselect_check_cmd is success
              - result_authselect_profile is not skipped
              - result_pam_authselect_restore_features is not skipped

            - name: Limit Password Reuse - Change the PAM file to be edited according
                to the custom authselect profile
              ansible.builtin.set_fact:
                pam_file_path: /etc/authselect/{{ authselect_custom_profile }}/{{ pam_file_path
                  | basename }}
            when:
            - result_authselect_present.stat.exists

          - name: Limit Password Reuse - Ensure the "remember" option from "pam_pwhistory.so"
              is not present in {{ pam_file_path }}
            ansible.builtin.replace:
              dest: '{{ pam_file_path }}'
              regexp: (.*password.*pam_pwhistory.so.*)\bremember\b=?[0-9a-zA-Z]*(.*)
              replace: \1\2
            register: result_pam_option_removal

          - name: Limit Password Reuse - Ensure authselect changes are applied
            ansible.builtin.command:
              cmd: authselect apply-changes -b
            when:
            - result_authselect_present.stat.exists
            - result_pam_option_removal is changed
          when:
          - result_pam_file_present.stat.exists
      when:
      - '"pam" in ansible_facts.packages'
      - result_pwhistory_conf_check.stat.exists
      tags:
      - CCE-85678-1
      - CJIS-5.6.2.1.1
      - DISA-STIG-SLES-15-020250
      - NIST-800-171-3.5.8
      - NIST-800-53-IA-5(1)(e)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.5
      - PCI-DSSv4-8.3.7
      - accounts_password_pam_unix_remember
      - configure_strategy
      - low_complexity
      - medium_disruption
      - medium_severity
      - no_reboot_needed

    - name: Limit Password Reuse - pam_pwhistory.so parameters are configured in PAM files
      block:

      - name: Limit Password Reuse - Define the PAM file to be edited as a local fact
        ansible.builtin.set_fact:
          pam_file_path: /etc/pam.d/common-password

      - name: Limit Password Reuse - Check if system relies on authselect tool
        ansible.builtin.stat:
          path: /usr/bin/authselect
        register: result_authselect_present

      - name: Limit Password Reuse - Ensure authselect custom profile is used if authselect
          is present
        block:

        - name: Limit Password Reuse - Check integrity of authselect current profile
          ansible.builtin.command:
            cmd: authselect check
          register: result_authselect_check_cmd
          changed_when: false
          failed_when: false

        - name: Limit Password Reuse - Informative message based on the authselect integrity
            check result
          ansible.builtin.assert:
            that:
            - result_authselect_check_cmd.rc == 0
            fail_msg:
            - authselect integrity check failed. Remediation aborted!
            - This remediation could not be applied because an authselect profile was
              not selected or the selected profile is not intact.
            - It is not recommended to manually edit the PAM files when authselect tool
              is available.
            - In cases where the default authselect profile does not cover a specific
              demand, a custom authselect profile is recommended.
            success_msg:
            - authselect integrity check passed

        - name: Limit Password Reuse - Get authselect current profile
          ansible.builtin.shell:
            cmd: authselect current -r | awk '{ print $1 }'
          register: result_authselect_profile
          changed_when: false
          when:
          - result_authselect_check_cmd is success

        - name: Limit Password Reuse - Define the current authselect profile as a local
            fact
          ansible.builtin.set_fact:
            authselect_current_profile: '{{ result_authselect_profile.stdout }}'
            authselect_custom_profile: '{{ result_authselect_profile.stdout }}'
          when:
          - result_authselect_profile is not skipped
          - result_authselect_profile.stdout is match("custom/")

        - name: Limit Password Reuse - Define the new authselect custom profile as a local
            fact
          ansible.builtin.set_fact:
            authselect_current_profile: '{{ result_authselect_profile.stdout }}'
            authselect_custom_profile: custom/hardening
          when:
          - result_authselect_profile is not skipped
          - result_authselect_profile.stdout is not match("custom/")

        - name: Limit Password Reuse - Get authselect current features to also enable
            them in the custom profile
          ansible.builtin.shell:
            cmd: authselect current | tail -n+3 | awk '{ print $2 }'
          register: result_authselect_features
          changed_when: false
          when:
          - result_authselect_profile is not skipped
          - authselect_current_profile is not match("custom/")

        - name: Limit Password Reuse - Check if any custom profile with the same name
            was already created
          ansible.builtin.stat:
            path: /etc/authselect/{{ authselect_custom_profile }}
          register: result_authselect_custom_profile_present
          changed_when: false
          when:
          - authselect_current_profile is not match("custom/")

        - name: Limit Password Reuse - Create an authselect custom profile based on the
            current profile
          ansible.builtin.command:
            cmd: authselect create-profile hardening -b {{ authselect_current_profile
              }}
          when:
          - result_authselect_check_cmd is success
          - authselect_current_profile is not match("custom/")
          - not result_authselect_custom_profile_present.stat.exists

        - name: Limit Password Reuse - Ensure authselect changes are applied
          ansible.builtin.command:
            cmd: authselect apply-changes -b --backup=before-hardening-custom-profile
          when:
          - result_authselect_check_cmd is success
          - result_authselect_profile is not skipped
          - authselect_current_profile is not match("custom/")
          - authselect_custom_profile is not match(authselect_current_profile)

        - name: Limit Password Reuse - Ensure the authselect custom profile is selected
          ansible.builtin.command:
            cmd: authselect select {{ authselect_custom_profile }}
          register: result_pam_authselect_select_profile
          when:
          - result_authselect_check_cmd is success
          - result_authselect_profile is not skipped
          - authselect_current_profile is not match("custom/")
          - authselect_custom_profile is not match(authselect_current_profile)

        - name: Limit Password Reuse - Restore the authselect features in the custom profile
          ansible.builtin.command:
            cmd: authselect enable-feature {{ item }}
          loop: '{{ result_authselect_features.stdout_lines }}'
          register: result_pam_authselect_restore_features
          when:
          - result_authselect_profile is not skipped
          - result_authselect_features is not skipped
          - result_pam_authselect_select_profile is not skipped

        - name: Limit Password Reuse - Ensure authselect changes are applied
          ansible.builtin.command:
            cmd: authselect apply-changes -b --backup=after-hardening-custom-profile
          when:
          - result_authselect_check_cmd is success
          - result_authselect_profile is not skipped
          - result_pam_authselect_restore_features is not skipped

        - name: Limit Password Reuse - Change the PAM file to be edited according to the
            custom authselect profile
          ansible.builtin.set_fact:
            pam_file_path: /etc/authselect/{{ authselect_custom_profile }}/{{ pam_file_path
              | basename }}
        when:
        - result_authselect_present.stat.exists

      - name: Limit Password Reuse - Check if expected PAM module line is present in {{
          pam_file_path }}
        ansible.builtin.lineinfile:
          path: '{{ pam_file_path }}'
          regexp: ^\s*password\s+{{ 'requisite' | regex_escape() }}\s+pam_pwhistory.so\s*.*
          state: absent
        check_mode: true
        changed_when: false
        register: result_pam_line_present

      - name: Limit Password Reuse - Include or update the PAM module line in {{ pam_file_path
          }}
        block:

        - name: Limit Password Reuse - Check if required PAM module line is present in
            {{ pam_file_path }} with different control
          ansible.builtin.lineinfile:
            path: '{{ pam_file_path }}'
            regexp: ^\s*password\s+.*\s+pam_pwhistory.so\s*
            state: absent
          check_mode: true
          changed_when: false
          register: result_pam_line_other_control_present

        - name: Limit Password Reuse - Ensure the correct control for the required PAM
            module line in {{ pam_file_path }}
          ansible.builtin.replace:
            dest: '{{ pam_file_path }}'
            regexp: ^(\s*password\s+).*(\bpam_pwhistory.so.*)
            replace: \1requisite \2
          register: result_pam_module_edit
          when:
          - result_pam_line_other_control_present.found == 1

        - name: Limit Password Reuse - Ensure the required PAM module line is included
            in {{ pam_file_path }}
          ansible.builtin.lineinfile:
            dest: '{{ pam_file_path }}'
            line: password    requisite    pam_pwhistory.so
          register: result_pam_module_add
          when:
          - result_pam_line_other_control_present.found == 0 or result_pam_line_other_control_present.found
            > 1

        - name: Limit Password Reuse - Ensure authselect changes are applied
          ansible.builtin.command:
            cmd: authselect apply-changes -b
          when:
          - result_authselect_present is defined
          - result_authselect_present.stat.exists
          - |-
            (result_pam_module_add is defined and result_pam_module_add.changed)
             or (result_pam_module_edit is defined and result_pam_module_edit.changed)
        when:
        - result_pam_line_present.found is defined
        - result_pam_line_present.found == 0

      - name: Limit Password Reuse - Check if the required PAM module option is present
          in {{ pam_file_path }}
        ansible.builtin.lineinfile:
          path: '{{ pam_file_path }}'
          regexp: ^\s*password\s+{{ 'requisite' | regex_escape() }}\s+pam_pwhistory.so\s*.*\sremember\b
          state: absent
        check_mode: true
        changed_when: false
        register: result_pam_module_remember_option_present

      - name: Limit Password Reuse - Ensure the "remember" PAM option for "pam_pwhistory.so"
          is included in {{ pam_file_path }}
        ansible.builtin.lineinfile:
          path: '{{ pam_file_path }}'
          backrefs: true
          regexp: ^(\s*password\s+{{ 'requisite' | regex_escape() }}\s+pam_pwhistory.so.*)
          line: \1 remember={{ var_password_pam_unix_remember }}
          state: present
        register: result_pam_remember_add
        when:
        - result_pam_module_remember_option_present.found == 0

      - name: Limit Password Reuse - Ensure the required value for "remember" PAM option
          from "pam_pwhistory.so" in {{ pam_file_path }}
        ansible.builtin.lineinfile:
          path: '{{ pam_file_path }}'
          backrefs: true
          regexp: ^(\s*password\s+{{ 'requisite' | regex_escape() }}\s+pam_pwhistory.so\s+.*)(remember)=[0-9a-zA-Z]+\s*(.*)
          line: \1\2={{ var_password_pam_unix_remember }} \3
        register: result_pam_remember_edit
        when:
        - result_pam_module_remember_option_present.found > 0

      - name: Limit Password Reuse - Ensure authselect changes are applied
        ansible.builtin.command:
          cmd: authselect apply-changes -b
        when:
        - result_authselect_present.stat.exists
        - (result_pam_remember_add is defined and result_pam_remember_add.changed) or
          (result_pam_remember_edit is defined and result_pam_remember_edit.changed)
      when:
      - '"pam" in ansible_facts.packages'
      - not result_pwhistory_conf_check.stat.exists
      tags:
      - CCE-85678-1
      - CJIS-5.6.2.1.1
      - DISA-STIG-SLES-15-020250
      - NIST-800-171-3.5.8
      - NIST-800-53-IA-5(1)(e)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.5
      - PCI-DSSv4-8.3.7
      - accounts_password_pam_unix_remember
      - configure_strategy
      - low_complexity
      - medium_disruption
      - medium_severity
      - no_reboot_needed


    - name: Gather the package facts
      package_facts:
        manager: auto
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed



    - name: Set Deny For Failed Password Attempts - Check if expected PAM module line
        is present in /etc/pam.d/login
      ansible.builtin.lineinfile:
        path: /etc/pam.d/login
        regexp: ^\s*auth\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s*.*
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_line_present
      when: '"pam" in ansible_facts.packages'
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Include or update the PAM module line
        in /etc/pam.d/login
      block:

      - name: Set Deny For Failed Password Attempts - Check if required PAM module line
          is present in /etc/pam.d/login with different control
        ansible.builtin.lineinfile:
          path: /etc/pam.d/login
          regexp: ^\s*auth\s+.*\s+pam_tally2.so\s*
          state: absent
        check_mode: true
        changed_when: false
        register: result_pam_line_other_control_present

      - name: Set Deny For Failed Password Attempts - Ensure the correct control for the
          required PAM module line in /etc/pam.d/login
        ansible.builtin.replace:
          dest: /etc/pam.d/login
          regexp: ^(\s*auth\s+).*(\bpam_tally2.so.*)
          replace: \1required \2
        register: result_pam_module_edit
        when:
        - result_pam_line_other_control_present.found == 1

      - name: Set Deny For Failed Password Attempts - Ensure the required PAM module line
          is included in /etc/pam.d/login
        ansible.builtin.lineinfile:
          dest: /etc/pam.d/login
          line: auth    required    pam_tally2.so
        register: result_pam_module_add
        when:
        - result_pam_line_other_control_present.found == 0 or result_pam_line_other_control_present.found
          > 1

      - name: Set Deny For Failed Password Attempts - Ensure authselect changes are applied
        ansible.builtin.command:
          cmd: authselect apply-changes -b
        when:
        - result_authselect_present is defined
        - result_authselect_present.stat.exists
        - |-
          (result_pam_module_add is defined and result_pam_module_add.changed)
           or (result_pam_module_edit is defined and result_pam_module_edit.changed)
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_line_present.found is defined
      - result_pam_line_present.found == 0
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Check if the required PAM module option
        is present in /etc/pam.d/login
      ansible.builtin.lineinfile:
        path: /etc/pam.d/login
        regexp: ^\s*auth\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s*.*\sdeny\b
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_module_deny_option_present
      when: '"pam" in ansible_facts.packages'
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Ensure the "deny" PAM option for "pam_tally2.so"
        is included in /etc/pam.d/login
      ansible.builtin.lineinfile:
        path: /etc/pam.d/login
        backrefs: true
        regexp: ^(\s*auth\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so.*)
        line: \1 deny={{ var_password_pam_tally2 }}
        state: present
      register: result_pam_deny_add
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_module_deny_option_present.found == 0
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Ensure the required value for "deny"
        PAM option from "pam_tally2.so" in /etc/pam.d/login
      ansible.builtin.lineinfile:
        path: /etc/pam.d/login
        backrefs: true
        regexp: ^(\s*auth\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s+.*)(deny)=[0-9a-zA-Z]+\s*(.*)
        line: \1\2={{ var_password_pam_tally2 }} \3
      register: result_pam_deny_edit
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_module_deny_option_present.found > 0
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Check if expected PAM module line
        is present in /etc/pam.d/login
      ansible.builtin.lineinfile:
        path: /etc/pam.d/login
        regexp: ^\s*auth\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s*.*
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_line_present
      when: '"pam" in ansible_facts.packages'
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Include or update the PAM module line
        in /etc/pam.d/login
      block:

      - name: Set Deny For Failed Password Attempts - Check if required PAM module line
          is present in /etc/pam.d/login with different control
        ansible.builtin.lineinfile:
          path: /etc/pam.d/login
          regexp: ^\s*auth\s+.*\s+pam_tally2.so\s*
          state: absent
        check_mode: true
        changed_when: false
        register: result_pam_line_other_control_present

      - name: Set Deny For Failed Password Attempts - Ensure the correct control for the
          required PAM module line in /etc/pam.d/login
        ansible.builtin.replace:
          dest: /etc/pam.d/login
          regexp: ^(\s*auth\s+).*(\bpam_tally2.so.*)
          replace: \1required \2
        register: result_pam_module_edit
        when:
        - result_pam_line_other_control_present.found == 1

      - name: Set Deny For Failed Password Attempts - Ensure the required PAM module line
          is included in /etc/pam.d/login
        ansible.builtin.lineinfile:
          dest: /etc/pam.d/login
          insertafter: (fail)
          line: auth    required    pam_tally2.so
        register: result_pam_module_add
        when:
        - result_pam_line_other_control_present.found == 0 or result_pam_line_other_control_present.found
          > 1

      - name: Set Deny For Failed Password Attempts - Ensure authselect changes are applied
        ansible.builtin.command:
          cmd: authselect apply-changes -b
        when:
        - result_authselect_present is defined
        - result_authselect_present.stat.exists
        - |-
          (result_pam_module_add is defined and result_pam_module_add.changed)
           or (result_pam_module_edit is defined and result_pam_module_edit.changed)
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_line_present.found is defined
      - result_pam_line_present.found == 0
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Check if the required PAM module option
        is present in /etc/pam.d/login
      ansible.builtin.lineinfile:
        path: /etc/pam.d/login
        regexp: ^\s*auth\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s*.*\sonerr\b
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_module_onerr_option_present
      when: '"pam" in ansible_facts.packages'
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Ensure the "onerr" PAM option for
        "pam_tally2.so" is included in /etc/pam.d/login
      ansible.builtin.lineinfile:
        path: /etc/pam.d/login
        backrefs: true
        regexp: ^(\s*auth\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so.*)
        line: \1 onerr=fail
        state: present
      register: result_pam_onerr_add
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_module_onerr_option_present.found == 0
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Ensure the required value for "onerr"
        PAM option from "pam_tally2.so" in /etc/pam.d/login
      ansible.builtin.lineinfile:
        path: /etc/pam.d/login
        backrefs: true
        regexp: ^(\s*auth\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s+.*)(onerr)=[0-9a-zA-Z]+\s*(.*)
        line: \1\2=fail \3
      register: result_pam_onerr_edit
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_module_onerr_option_present.found > 0
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Check if expected PAM module line
        is present in /etc/pam.d/common-account
      ansible.builtin.lineinfile:
        path: /etc/pam.d/common-account
        regexp: ^\s*account\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s*.*
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_line_present
      when: '"pam" in ansible_facts.packages'
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Include or update the PAM module line
        in /etc/pam.d/common-account
      block:

      - name: Set Deny For Failed Password Attempts - Check if required PAM module line
          is present in /etc/pam.d/common-account with different control
        ansible.builtin.lineinfile:
          path: /etc/pam.d/common-account
          regexp: ^\s*account\s+.*\s+pam_tally2.so\s*
          state: absent
        check_mode: true
        changed_when: false
        register: result_pam_line_other_control_present

      - name: Set Deny For Failed Password Attempts - Ensure the correct control for the
          required PAM module line in /etc/pam.d/common-account
        ansible.builtin.replace:
          dest: /etc/pam.d/common-account
          regexp: ^(\s*account\s+).*(\bpam_tally2.so.*)
          replace: \1required \2
        register: result_pam_module_edit
        when:
        - result_pam_line_other_control_present.found == 1

      - name: Set Deny For Failed Password Attempts - Ensure the required PAM module line
          is included in /etc/pam.d/common-account
        ansible.builtin.lineinfile:
          dest: /etc/pam.d/common-account
          line: account    required    pam_tally2.so
        register: result_pam_module_add
        when:
        - result_pam_line_other_control_present.found == 0 or result_pam_line_other_control_present.found
          > 1

      - name: Set Deny For Failed Password Attempts - Ensure authselect changes are applied
        ansible.builtin.command:
          cmd: authselect apply-changes -b
        when:
        - result_authselect_present is defined
        - result_authselect_present.stat.exists
        - |-
          (result_pam_module_add is defined and result_pam_module_add.changed)
           or (result_pam_module_edit is defined and result_pam_module_edit.changed)
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_line_present.found is defined
      - result_pam_line_present.found == 0
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Check if the required PAM module option
        is present in /etc/pam.d/common-account
      ansible.builtin.lineinfile:
        path: /etc/pam.d/common-account
        regexp: ^\s*account\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s*.*\s\b
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_module__option_present
      when: '"pam" in ansible_facts.packages'
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed

    - name: Set Deny For Failed Password Attempts - Ensure the "" PAM option for "pam_tally2.so"
        is included in /etc/pam.d/common-account
      ansible.builtin.lineinfile:
        path: /etc/pam.d/common-account
        backrefs: true
        regexp: ^(\s*account\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so.*)
        line: \1
        state: present
      register: result_pam__add
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_module__option_present.found == 0
      tags:
      - CCE-85554-4
      - DISA-STIG-SLES-15-020010
      - PCI-DSS-Req-8.1.6
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2
      - configure_strategy
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed


    - name: Gather the package facts
      package_facts:
        manager: auto
      tags:
      - CCE-91282-4
      - NIST-800-53-AC-7(b)
      - NIST-800-53-CM-6(a)
      - NIST-800-53-IA-5(c)
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2_unlock_time
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy



    - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Check if
        expected PAM module line is present in /etc/pam.d/login
      ansible.builtin.lineinfile:
        path: /etc/pam.d/login
        regexp: ^\s*auth\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s*.*
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_line_present
      when: '"pam" in ansible_facts.packages'
      tags:
      - CCE-91282-4
      - NIST-800-53-AC-7(b)
      - NIST-800-53-CM-6(a)
      - NIST-800-53-IA-5(c)
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2_unlock_time
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Include or
        update the PAM module line in /etc/pam.d/login
      block:

      - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Check if
          required PAM module line is present in /etc/pam.d/login with different control
        ansible.builtin.lineinfile:
          path: /etc/pam.d/login
          regexp: ^\s*auth\s+.*\s+pam_tally2.so\s*
          state: absent
        check_mode: true
        changed_when: false
        register: result_pam_line_other_control_present

      - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Ensure
          the correct control for the required PAM module line in /etc/pam.d/login
        ansible.builtin.replace:
          dest: /etc/pam.d/login
          regexp: ^(\s*auth\s+).*(\bpam_tally2.so.*)
          replace: \1required \2
        register: result_pam_module_edit
        when:
        - result_pam_line_other_control_present.found == 1

      - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Ensure
          the required PAM module line is included in /etc/pam.d/login
        ansible.builtin.lineinfile:
          dest: /etc/pam.d/login
          line: auth    required    pam_tally2.so
        register: result_pam_module_add
        when:
        - result_pam_line_other_control_present.found == 0 or result_pam_line_other_control_present.found
          > 1

      - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Ensure
          authselect changes are applied
        ansible.builtin.command:
          cmd: authselect apply-changes -b
        when:
        - result_authselect_present is defined
        - result_authselect_present.stat.exists
        - |-
          (result_pam_module_add is defined and result_pam_module_add.changed)
           or (result_pam_module_edit is defined and result_pam_module_edit.changed)
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_line_present.found is defined
      - result_pam_line_present.found == 0
      tags:
      - CCE-91282-4
      - NIST-800-53-AC-7(b)
      - NIST-800-53-CM-6(a)
      - NIST-800-53-IA-5(c)
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2_unlock_time
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Check if
        the required PAM module option is present in /etc/pam.d/login
      ansible.builtin.lineinfile:
        path: /etc/pam.d/login
        regexp: ^\s*auth\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s*.*\sunlock_time\b
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_module_unlock_time_option_present
      when: '"pam" in ansible_facts.packages'
      tags:
      - CCE-91282-4
      - NIST-800-53-AC-7(b)
      - NIST-800-53-CM-6(a)
      - NIST-800-53-IA-5(c)
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2_unlock_time
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Ensure the
        "unlock_time" PAM option for "pam_tally2.so" is included in /etc/pam.d/login
      ansible.builtin.lineinfile:
        path: /etc/pam.d/login
        backrefs: true
        regexp: ^(\s*auth\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so.*)
        line: \1 unlock_time={{ var_accounts_passwords_pam_tally2_unlock_time }}
        state: present
      register: result_pam_unlock_time_add
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_module_unlock_time_option_present.found == 0
      tags:
      - CCE-91282-4
      - NIST-800-53-AC-7(b)
      - NIST-800-53-CM-6(a)
      - NIST-800-53-IA-5(c)
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2_unlock_time
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Ensure the
        required value for "unlock_time" PAM option from "pam_tally2.so" in /etc/pam.d/login
      ansible.builtin.lineinfile:
        path: /etc/pam.d/login
        backrefs: true
        regexp: ^(\s*auth\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s+.*)(unlock_time)=[0-9a-zA-Z]+\s*(.*)
        line: \1\2={{ var_accounts_passwords_pam_tally2_unlock_time }} \3
      register: result_pam_unlock_time_edit
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_module_unlock_time_option_present.found > 0
      tags:
      - CCE-91282-4
      - NIST-800-53-AC-7(b)
      - NIST-800-53-CM-6(a)
      - NIST-800-53-IA-5(c)
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2_unlock_time
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Check if
        expected PAM module line is present in /etc/pam.d/common-account
      ansible.builtin.lineinfile:
        path: /etc/pam.d/common-account
        regexp: ^\s*account\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s*.*
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_line_present
      when: '"pam" in ansible_facts.packages'
      tags:
      - CCE-91282-4
      - NIST-800-53-AC-7(b)
      - NIST-800-53-CM-6(a)
      - NIST-800-53-IA-5(c)
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2_unlock_time
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Include or
        update the PAM module line in /etc/pam.d/common-account
      block:

      - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Check if
          required PAM module line is present in /etc/pam.d/common-account with different
          control
        ansible.builtin.lineinfile:
          path: /etc/pam.d/common-account
          regexp: ^\s*account\s+.*\s+pam_tally2.so\s*
          state: absent
        check_mode: true
        changed_when: false
        register: result_pam_line_other_control_present

      - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Ensure
          the correct control for the required PAM module line in /etc/pam.d/common-account
        ansible.builtin.replace:
          dest: /etc/pam.d/common-account
          regexp: ^(\s*account\s+).*(\bpam_tally2.so.*)
          replace: \1required \2
        register: result_pam_module_edit
        when:
        - result_pam_line_other_control_present.found == 1

      - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Ensure
          the required PAM module line is included in /etc/pam.d/common-account
        ansible.builtin.lineinfile:
          dest: /etc/pam.d/common-account
          line: account    required    pam_tally2.so
        register: result_pam_module_add
        when:
        - result_pam_line_other_control_present.found == 0 or result_pam_line_other_control_present.found
          > 1

      - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Ensure
          authselect changes are applied
        ansible.builtin.command:
          cmd: authselect apply-changes -b
        when:
        - result_authselect_present is defined
        - result_authselect_present.stat.exists
        - |-
          (result_pam_module_add is defined and result_pam_module_add.changed)
           or (result_pam_module_edit is defined and result_pam_module_edit.changed)
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_line_present.found is defined
      - result_pam_line_present.found == 0
      tags:
      - CCE-91282-4
      - NIST-800-53-AC-7(b)
      - NIST-800-53-CM-6(a)
      - NIST-800-53-IA-5(c)
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2_unlock_time
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Check if
        the required PAM module option is present in /etc/pam.d/common-account
      ansible.builtin.lineinfile:
        path: /etc/pam.d/common-account
        regexp: ^\s*account\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so\s*.*\s\b
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_module__option_present
      when: '"pam" in ansible_facts.packages'
      tags:
      - CCE-91282-4
      - NIST-800-53-AC-7(b)
      - NIST-800-53-CM-6(a)
      - NIST-800-53-IA-5(c)
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2_unlock_time
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Set Lockout Time for Failed Password Attempts using pam_tally2 - Ensure the
        "" PAM option for "pam_tally2.so" is included in /etc/pam.d/common-account
      ansible.builtin.lineinfile:
        path: /etc/pam.d/common-account
        backrefs: true
        regexp: ^(\s*account\s+{{ 'required' | regex_escape() }}\s+pam_tally2.so.*)
        line: \1
        state: present
      register: result_pam__add
      when:
      - '"pam" in ansible_facts.packages'
      - result_pam_module__option_present.found == 0
      tags:
      - CCE-91282-4
      - NIST-800-53-AC-7(b)
      - NIST-800-53-CM-6(a)
      - NIST-800-53-IA-5(c)
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - accounts_passwords_pam_tally2_unlock_time
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy





    - name: Set control_flag fact
      set_fact:
        control_flag: requisite
      tags:
      - CCE-85564-3
      - DISA-STIG-SLES-15-020150
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_dcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check to see if 'pam_cracklib.so' module is configured in '/etc/pam.d/common-password'
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+\S+\s+pam_cracklib.so' /etc/pam.d/common-password || true
      register: check_pam_module_result
      tags:
      - CCE-85564-3
      - DISA-STIG-SLES-15-020150
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_dcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Configure 'pam_cracklib.so' module in '/etc/pam.d/common-password'
      lineinfile:
        path: /etc/pam.d/common-password
        line: password requisite pam_cracklib.so
        state: present
      when: check_pam_module_result.stdout is defined and '"pam_cracklib.so" not in check_pam_module_result.stdout'
      tags:
      - CCE-85564-3
      - DISA-STIG-SLES-15-020150
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_dcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure 'pam_cracklib.so' module has conforming control flag
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+)\S+(\s+pam_cracklib.so\s+.*)
        line: \g<1>requisite\g<2>
        backrefs: true
      when: control_flag|length
      tags:
      - CCE-85564-3
      - DISA-STIG-SLES-15-020150
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_dcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure "pam_cracklib.so" module has argument "dcredit={{ var_password_pam_dcredit
        }}"
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so(?:\s+\S+)*\s+dcredit=)(?:\S+)((\s+\S+)*\s*\\*\s*)$
        line: \g<1>{{ var_password_pam_dcredit }}\g<2>
        backrefs: true
      tags:
      - CCE-85564-3
      - DISA-STIG-SLES-15-020150
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_dcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check the presence of "dcredit" argument in "pam_cracklib.so" module
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+requisite\s+pam_cracklib.so.*\s+dcredit(=|\s|\s*$)' /etc/pam.d/common-password || true
      register: check_pam_module_argument_result
      tags:
      - CCE-85564-3
      - DISA-STIG-SLES-15-020150
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_dcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Add "dcredit" argument to "pam_cracklib.so" module
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so)((\s+\S+)*\s*(\\)*$)
        line: \g<1> dcredit={{ var_password_pam_dcredit }}\g<2>
        backrefs: true
      when: check_pam_module_argument_result is not skipped and '"dcredit" not in check_pam_module_argument_result.stdout'
      tags:
      - CCE-85564-3
      - DISA-STIG-SLES-15-020150
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_dcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy





    - name: Set control_flag fact
      set_fact:
        control_flag: requisite
      tags:
      - CCE-85677-3
      - DISA-STIG-SLES-15-020160
      - NIST-800-53-IA-5(1)(b)
      - NIST-800-53-IA-5(1).1(v)
      - cracklib_accounts_password_pam_difok
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check to see if 'pam_cracklib.so' module is configured in '/etc/pam.d/common-password'
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+\S+\s+pam_cracklib.so' /etc/pam.d/common-password || true
      register: check_pam_module_result
      tags:
      - CCE-85677-3
      - DISA-STIG-SLES-15-020160
      - NIST-800-53-IA-5(1)(b)
      - NIST-800-53-IA-5(1).1(v)
      - cracklib_accounts_password_pam_difok
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Configure 'pam_cracklib.so' module in '/etc/pam.d/common-password'
      lineinfile:
        path: /etc/pam.d/common-password
        line: password requisite pam_cracklib.so
        state: present
      when: check_pam_module_result.stdout is defined and '"pam_cracklib.so" not in check_pam_module_result.stdout'
      tags:
      - CCE-85677-3
      - DISA-STIG-SLES-15-020160
      - NIST-800-53-IA-5(1)(b)
      - NIST-800-53-IA-5(1).1(v)
      - cracklib_accounts_password_pam_difok
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure 'pam_cracklib.so' module has conforming control flag
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+)\S+(\s+pam_cracklib.so\s+.*)
        line: \g<1>requisite\g<2>
        backrefs: true
      when: control_flag|length
      tags:
      - CCE-85677-3
      - DISA-STIG-SLES-15-020160
      - NIST-800-53-IA-5(1)(b)
      - NIST-800-53-IA-5(1).1(v)
      - cracklib_accounts_password_pam_difok
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure "pam_cracklib.so" module has argument "difok={{ var_password_pam_difok
        }}"
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so(?:\s+\S+)*\s+difok=)(?:\S+)((\s+\S+)*\s*\\*\s*)$
        line: \g<1>{{ var_password_pam_difok }}\g<2>
        backrefs: true
      tags:
      - CCE-85677-3
      - DISA-STIG-SLES-15-020160
      - NIST-800-53-IA-5(1)(b)
      - NIST-800-53-IA-5(1).1(v)
      - cracklib_accounts_password_pam_difok
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check the presence of "difok" argument in "pam_cracklib.so" module
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+requisite\s+pam_cracklib.so.*\s+difok(=|\s|\s*$)' /etc/pam.d/common-password || true
      register: check_pam_module_argument_result
      tags:
      - CCE-85677-3
      - DISA-STIG-SLES-15-020160
      - NIST-800-53-IA-5(1)(b)
      - NIST-800-53-IA-5(1).1(v)
      - cracklib_accounts_password_pam_difok
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Add "difok" argument to "pam_cracklib.so" module
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so)((\s+\S+)*\s*(\\)*$)
        line: \g<1> difok={{ var_password_pam_difok }}\g<2>
        backrefs: true
      when: check_pam_module_argument_result is not skipped and '"difok" not in check_pam_module_argument_result.stdout'
      tags:
      - CCE-85677-3
      - DISA-STIG-SLES-15-020160
      - NIST-800-53-IA-5(1)(b)
      - NIST-800-53-IA-5(1).1(v)
      - cracklib_accounts_password_pam_difok
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy





    - name: Set control_flag fact
      set_fact:
        control_flag: requisite
      tags:
      - CCE-85676-5
      - DISA-STIG-SLES-15-020140
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_lcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check to see if 'pam_cracklib.so' module is configured in '/etc/pam.d/common-password'
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+\S+\s+pam_cracklib.so' /etc/pam.d/common-password || true
      register: check_pam_module_result
      tags:
      - CCE-85676-5
      - DISA-STIG-SLES-15-020140
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_lcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Configure 'pam_cracklib.so' module in '/etc/pam.d/common-password'
      lineinfile:
        path: /etc/pam.d/common-password
        line: password requisite pam_cracklib.so
        state: present
      when: check_pam_module_result.stdout is defined and '"pam_cracklib.so" not in check_pam_module_result.stdout'
      tags:
      - CCE-85676-5
      - DISA-STIG-SLES-15-020140
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_lcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure 'pam_cracklib.so' module has conforming control flag
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+)\S+(\s+pam_cracklib.so\s+.*)
        line: \g<1>requisite\g<2>
        backrefs: true
      when: control_flag|length
      tags:
      - CCE-85676-5
      - DISA-STIG-SLES-15-020140
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_lcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure "pam_cracklib.so" module has argument "lcredit={{ var_password_pam_lcredit
        }}"
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so(?:\s+\S+)*\s+lcredit=)(?:\S+)((\s+\S+)*\s*\\*\s*)$
        line: \g<1>{{ var_password_pam_lcredit }}\g<2>
        backrefs: true
      tags:
      - CCE-85676-5
      - DISA-STIG-SLES-15-020140
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_lcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check the presence of "lcredit" argument in "pam_cracklib.so" module
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+requisite\s+pam_cracklib.so.*\s+lcredit(=|\s|\s*$)' /etc/pam.d/common-password || true
      register: check_pam_module_argument_result
      tags:
      - CCE-85676-5
      - DISA-STIG-SLES-15-020140
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_lcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Add "lcredit" argument to "pam_cracklib.so" module
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so)((\s+\S+)*\s*(\\)*$)
        line: \g<1> lcredit={{ var_password_pam_lcredit }}\g<2>
        backrefs: true
      when: check_pam_module_argument_result is not skipped and '"lcredit" not in check_pam_module_argument_result.stdout'
      tags:
      - CCE-85676-5
      - DISA-STIG-SLES-15-020140
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_lcredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy





    - name: Set control_flag fact
      set_fact:
        control_flag: requisite
      tags:
      - CCE-85573-4
      - DISA-STIG-SLES-15-020260
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_minlen
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check to see if 'pam_cracklib.so' module is configured in '/etc/pam.d/common-password'
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+\S+\s+pam_cracklib.so' /etc/pam.d/common-password || true
      register: check_pam_module_result
      tags:
      - CCE-85573-4
      - DISA-STIG-SLES-15-020260
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_minlen
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Configure 'pam_cracklib.so' module in '/etc/pam.d/common-password'
      lineinfile:
        path: /etc/pam.d/common-password
        line: password requisite pam_cracklib.so
        state: present
      when: check_pam_module_result.stdout is defined and '"pam_cracklib.so" not in check_pam_module_result.stdout'
      tags:
      - CCE-85573-4
      - DISA-STIG-SLES-15-020260
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_minlen
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure 'pam_cracklib.so' module has conforming control flag
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+)\S+(\s+pam_cracklib.so\s+.*)
        line: \g<1>requisite\g<2>
        backrefs: true
      when: control_flag|length
      tags:
      - CCE-85573-4
      - DISA-STIG-SLES-15-020260
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_minlen
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure "pam_cracklib.so" module has argument "minlen={{ var_password_pam_minlen
        }}"
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so(?:\s+\S+)*\s+minlen=)(?:\S+)((\s+\S+)*\s*\\*\s*)$
        line: \g<1>{{ var_password_pam_minlen }}\g<2>
        backrefs: true
      tags:
      - CCE-85573-4
      - DISA-STIG-SLES-15-020260
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_minlen
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check the presence of "minlen" argument in "pam_cracklib.so" module
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+requisite\s+pam_cracklib.so.*\s+minlen(=|\s|\s*$)' /etc/pam.d/common-password || true
      register: check_pam_module_argument_result
      tags:
      - CCE-85573-4
      - DISA-STIG-SLES-15-020260
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_minlen
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Add "minlen" argument to "pam_cracklib.so" module
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so)((\s+\S+)*\s*(\\)*$)
        line: \g<1> minlen={{ var_password_pam_minlen }}\g<2>
        backrefs: true
      when: check_pam_module_argument_result is not skipped and '"minlen" not in check_pam_module_argument_result.stdout'
      tags:
      - CCE-85573-4
      - DISA-STIG-SLES-15-020260
      - PCI-DSS-Req-8.2.3
      - PCI-DSSv4-8.3.6
      - cracklib_accounts_password_pam_minlen
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy





    - name: Set control_flag fact
      set_fact:
        control_flag: requisite
      tags:
      - CCE-85574-2
      - DISA-STIG-SLES-15-020270
      - NIST-800-53-IA-5(a)
      - NIST-800-53-IA-5(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ocredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check to see if 'pam_cracklib.so' module is configured in '/etc/pam.d/common-password'
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+\S+\s+pam_cracklib.so' /etc/pam.d/common-password || true
      register: check_pam_module_result
      tags:
      - CCE-85574-2
      - DISA-STIG-SLES-15-020270
      - NIST-800-53-IA-5(a)
      - NIST-800-53-IA-5(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ocredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Configure 'pam_cracklib.so' module in '/etc/pam.d/common-password'
      lineinfile:
        path: /etc/pam.d/common-password
        line: password requisite pam_cracklib.so
        state: present
      when: check_pam_module_result.stdout is defined and '"pam_cracklib.so" not in check_pam_module_result.stdout'
      tags:
      - CCE-85574-2
      - DISA-STIG-SLES-15-020270
      - NIST-800-53-IA-5(a)
      - NIST-800-53-IA-5(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ocredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure 'pam_cracklib.so' module has conforming control flag
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+)\S+(\s+pam_cracklib.so\s+.*)
        line: \g<1>requisite\g<2>
        backrefs: true
      when: control_flag|length
      tags:
      - CCE-85574-2
      - DISA-STIG-SLES-15-020270
      - NIST-800-53-IA-5(a)
      - NIST-800-53-IA-5(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ocredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure "pam_cracklib.so" module has argument "ocredit={{ var_password_pam_ocredit
        }}"
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so(?:\s+\S+)*\s+ocredit=)(?:\S+)((\s+\S+)*\s*\\*\s*)$
        line: \g<1>{{ var_password_pam_ocredit }}\g<2>
        backrefs: true
      tags:
      - CCE-85574-2
      - DISA-STIG-SLES-15-020270
      - NIST-800-53-IA-5(a)
      - NIST-800-53-IA-5(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ocredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check the presence of "ocredit" argument in "pam_cracklib.so" module
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+requisite\s+pam_cracklib.so.*\s+ocredit(=|\s|\s*$)' /etc/pam.d/common-password || true
      register: check_pam_module_argument_result
      tags:
      - CCE-85574-2
      - DISA-STIG-SLES-15-020270
      - NIST-800-53-IA-5(a)
      - NIST-800-53-IA-5(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ocredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Add "ocredit" argument to "pam_cracklib.so" module
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so)((\s+\S+)*\s*(\\)*$)
        line: \g<1> ocredit={{ var_password_pam_ocredit }}\g<2>
        backrefs: true
      when: check_pam_module_argument_result is not skipped and '"ocredit" not in check_pam_module_argument_result.stdout'
      tags:
      - CCE-85574-2
      - DISA-STIG-SLES-15-020270
      - NIST-800-53-IA-5(a)
      - NIST-800-53-IA-5(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ocredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy





    - name: Set control_flag fact
      set_fact:
        control_flag: requisite
      tags:
      - CCE-85575-9
      - DISA-STIG-SLES-15-020290
      - PCI-DSS-Req-8.1.6
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - cracklib_accounts_password_pam_retry
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check to see if 'pam_cracklib.so' module is configured in '/etc/pam.d/common-password'
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+\S+\s+pam_cracklib.so' /etc/pam.d/common-password || true
      register: check_pam_module_result
      tags:
      - CCE-85575-9
      - DISA-STIG-SLES-15-020290
      - PCI-DSS-Req-8.1.6
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - cracklib_accounts_password_pam_retry
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Configure 'pam_cracklib.so' module in '/etc/pam.d/common-password'
      lineinfile:
        path: /etc/pam.d/common-password
        line: password requisite pam_cracklib.so
        state: present
      when: check_pam_module_result.stdout is defined and '"pam_cracklib.so" not in check_pam_module_result.stdout'
      tags:
      - CCE-85575-9
      - DISA-STIG-SLES-15-020290
      - PCI-DSS-Req-8.1.6
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - cracklib_accounts_password_pam_retry
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure 'pam_cracklib.so' module has conforming control flag
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+)\S+(\s+pam_cracklib.so\s+.*)
        line: \g<1>requisite\g<2>
        backrefs: true
      when: control_flag|length
      tags:
      - CCE-85575-9
      - DISA-STIG-SLES-15-020290
      - PCI-DSS-Req-8.1.6
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - cracklib_accounts_password_pam_retry
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure "pam_cracklib.so" module has argument "retry={{ var_password_pam_retry
        }}"
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so(?:\s+\S+)*\s+retry=)(?:\S+)((\s+\S+)*\s*\\*\s*)$
        line: \g<1>{{ var_password_pam_retry }}\g<2>
        backrefs: true
      tags:
      - CCE-85575-9
      - DISA-STIG-SLES-15-020290
      - PCI-DSS-Req-8.1.6
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - cracklib_accounts_password_pam_retry
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check the presence of "retry" argument in "pam_cracklib.so" module
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+requisite\s+pam_cracklib.so.*\s+retry(=|\s|\s*$)' /etc/pam.d/common-password || true
      register: check_pam_module_argument_result
      tags:
      - CCE-85575-9
      - DISA-STIG-SLES-15-020290
      - PCI-DSS-Req-8.1.6
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - cracklib_accounts_password_pam_retry
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Add "retry" argument to "pam_cracklib.so" module
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so)((\s+\S+)*\s*(\\)*$)
        line: \g<1> retry={{ var_password_pam_retry }}\g<2>
        backrefs: true
      when: check_pam_module_argument_result is not skipped and '"retry" not in check_pam_module_argument_result.stdout'
      tags:
      - CCE-85575-9
      - DISA-STIG-SLES-15-020290
      - PCI-DSS-Req-8.1.6
      - PCI-DSS-Req-8.1.7
      - PCI-DSSv4-8.3.4
      - cracklib_accounts_password_pam_retry
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy





    - name: Set control_flag fact
      set_fact:
        control_flag: requisite
      tags:
      - CCE-85675-7
      - DISA-STIG-SLES-15-020130
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ucredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check to see if 'pam_cracklib.so' module is configured in '/etc/pam.d/common-password'
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+\S+\s+pam_cracklib.so' /etc/pam.d/common-password || true
      register: check_pam_module_result
      tags:
      - CCE-85675-7
      - DISA-STIG-SLES-15-020130
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ucredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Configure 'pam_cracklib.so' module in '/etc/pam.d/common-password'
      lineinfile:
        path: /etc/pam.d/common-password
        line: password requisite pam_cracklib.so
        state: present
      when: check_pam_module_result.stdout is defined and '"pam_cracklib.so" not in check_pam_module_result.stdout'
      tags:
      - CCE-85675-7
      - DISA-STIG-SLES-15-020130
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ucredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure 'pam_cracklib.so' module has conforming control flag
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+)\S+(\s+pam_cracklib.so\s+.*)
        line: \g<1>requisite\g<2>
        backrefs: true
      when: control_flag|length
      tags:
      - CCE-85675-7
      - DISA-STIG-SLES-15-020130
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ucredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Ensure "pam_cracklib.so" module has argument "ucredit={{ var_password_pam_ucredit
        }}"
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so(?:\s+\S+)*\s+ucredit=)(?:\S+)((\s+\S+)*\s*\\*\s*)$
        line: \g<1>{{ var_password_pam_ucredit }}\g<2>
        backrefs: true
      tags:
      - CCE-85675-7
      - DISA-STIG-SLES-15-020130
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ucredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Check the presence of "ucredit" argument in "pam_cracklib.so" module
      shell: |
        set -o pipefail
        grep -E '^\s*password\s+requisite\s+pam_cracklib.so.*\s+ucredit(=|\s|\s*$)' /etc/pam.d/common-password || true
      register: check_pam_module_argument_result
      tags:
      - CCE-85675-7
      - DISA-STIG-SLES-15-020130
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ucredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy

    - name: Add "ucredit" argument to "pam_cracklib.so" module
      lineinfile:
        path: /etc/pam.d/common-password
        regexp: ^(\s*password\s+requisite\s+pam_cracklib.so)((\s+\S+)*\s*(\\)*$)
        line: \g<1> ucredit={{ var_password_pam_ucredit }}\g<2>
        backrefs: true
      when: check_pam_module_argument_result is not skipped and '"ucredit" not in check_pam_module_argument_result.stdout'
      tags:
      - CCE-85675-7
      - DISA-STIG-SLES-15-020130
      - NIST-800-53-IA-5(1)(a)
      - NIST-800-53-IA-5(1).1(v)
      - PCI-DSS-Req-8.2.3
      - cracklib_accounts_password_pam_ucredit
      - low_complexity
      - low_disruption
      - medium_severity
      - no_reboot_needed
      - restrict_strategy